plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id 'me.modmuss50.mod-publish-plugin'
    id 'com.diffplug.spotless' version "7.0.0.BETA3"
}

neoForge {
    version = "${neo_version}"
    accessTransformers = ["src/main/resources/META-INF/accesstransformer.cfg"]

    parchment {
        minecraftVersion = "${parchment_minecraft}"
        mappingsVersion = "${parchment_version}"
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        configureEach {
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "mod.azure.azurelib:azurelib-neo-${minecraft_version}:${azurelib_version}"
    implementation "curse.maven:spark-361579:5434153"
}

if (file('key.properties').exists()) {
    publishMods {
        def releaseProp = new Properties()
        File secretPropsFile = file("key.properties")
        releaseProp.load(secretPropsFile.newInputStream())
        file = jar.archiveFile
        changelog = rootProject.file("changelog.md").text
        type = STABLE
        modLoaders.add("neoforge")

        curseforge {
            projectId = project.curseforgeID
            projectSlug = project.projectSlug
            accessToken = releaseProp.getProperty("curseKey")
            minecraftVersions.add("${minecraft_version}")
            requires {
                slug = "azurelib"
            }
        }
        modrinth {
            projectId = project.modrinthID
            accessToken = releaseProp.getProperty('modrinthKey')
            minecraftVersions.add("${minecraft_version}")
            requires {
                slug = "azurelib"
            }
        }
    }
}
